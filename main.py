import logging
import os
import threading

from Src.utils import WHITE, RESET, banner, loading, loading_event, line_after, line_before, YELLOW, CYAN
from Src.Hamster import HamsterKombatClicker

from dotenv import load_dotenv
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env'))

# logging.basicConfig(format=f"{WHITE}%(asctime)s - %(name)s - %(levelname)s |  %(message)s  | %(filename)s - %(funcName)s() - %(lineno)d{RESET}", level=logging.INFO)
logging.basicConfig(format=f"{WHITE}%(asctime)s - %(name)s - %(levelname)s |  %(message)s{WHITE}", level=logging.INFO)

# --- CONFIG --- #

send_to_group = True
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = os.getenv('GROUP_ID')
HAMSTER_TOKEN = os.getenv('HAMSTER_TOKEN')

hamster_client = HamsterKombatClicker(HAMSTER_TOKEN)

# --- CONFIG --- #


def show_menu():
    memu = f"""
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    ‚Ñπ   {YELLOW}#.{RESET} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    üëÜ   {YELLOW}1.{RESET} –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫–∏
    üåü   {YELLOW}2.{RESET} –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è
    üóÉ   {YELLOW}3.{RESET} –ü–æ–ª—É—á–∏—Ç—å —à–∏—Ñ—Ä
    üí∞   {YELLOW}4.{RESET} –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–±–æ
    üîë   {YELLOW}5.{RESET} –ü—Ä–æ–π—Ç–∏ –º–∏–Ω–∏–∏–≥—Ä—É
    üö¥   {YELLOW}6.{RESET} –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è Bike Ride 3D
    üé≤   {YELLOW}7.{RESET} –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è Chain Cube 2048
    üïπ   {YELLOW}8.{RESET} –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è My Clone Army
    üöÇ   {YELLOW}9.{RESET} –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è Train Miner
    üéâ   {YELLOW}*.{RESET} –ü—Ä–æ–π—Ç–∏ —Å—Ä–∞–∑—É –≤—Å–µ –∏–≥—Ä—ã
    üîô   {YELLOW}0.{RESET} –í—ã–π—Ç–∏
    """

    print(memu.strip())
    choice = input(f"\n{CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (#/1/2/3/4/5/6/7/8/9/0):{RESET} ")
    line_before()
    return choice


def generate_promocodes(apply_promo=False, prefix=None):
    if prefix:
        count = input(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (enter –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ")
        if count == '':
            count = 1
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è 1 –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        if int(count) <= 0:
            logging.error(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")
            exit(1)

        main_thread = threading.Thread(target=hamster_client.get_promocodes, args=(count, send_to_group, BOT_TOKEN, GROUP_ID, apply_promo, prefix))
        loading_thread = threading.Thread(target=loading)

        loading_thread.start()
        main_thread.start()

        main_thread.join()

        loading_event.set()
        loading_thread.join()

    else:
        logging.error(f"–ü—Ä–µ—Ñ–∏–∫—Å –∏–≥—Ä—ã –Ω–µ —É–∑–∫–∞–∑–∞–Ω")
        exit(1)


def main():
    banner()
    while True:
        choice = show_menu()

        if choice == '#':
            info = hamster_client.daily_info()
            print(info)
            line_after()

        elif choice == '1':
            hamster_client.complete_taps()
            line_after()

        elif choice == '2':
            hamster_client.complete_daily_tasks()
            line_after()

        elif choice == '3':
            hamster_client.complete_daily_chipher()
            line_after()

        elif choice == '4':
            upgrades_info = hamster_client._collect_upgrades_info()
            if all(card['available'] for card in upgrades_info['cards']):
                hamster_client.complete_daily_combo()
            else:
                choice = input(f"–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã! –•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ? Y(–¥–∞)/N(–Ω–µ—Ç): ")
                if str(choice.lower()) == 'y'.lower():
                    hamster_client.complete_daily_combo(buy_anyway=True)
                elif str(choice.lower()) == 'n'.lower():
                    line_after()
                else:
                    logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '5':
            hamster_client.complete_daily_minigame()
            line_after()

        elif choice == '6':
            choice = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è? Y(–¥–∞)/N(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                generate_promocodes(prefix='BIKE', apply_promo=True)
            elif str(choice.lower()) == 'n'.lower():
                generate_promocodes(prefix='BIKE')
            else:
                logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '7':
            choice = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è? Y(–¥–∞)/N(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                generate_promocodes(prefix='CUBE', apply_promo=True)
            elif str(choice.lower()) == 'n'.lower():
                generate_promocodes(prefix='CUBE')
            else:
                logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '8':
            choice = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è? Y(–¥–∞)/N(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                generate_promocodes(prefix='CLONE', apply_promo=True)
            elif str(choice.lower()) == 'n'.lower():
                generate_promocodes(prefix='CLONE')
            else:
                logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '9':
            choice = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è? Y(–¥–∞)/N(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                generate_promocodes(prefix='TRAIN', apply_promo=True)
            elif str(choice.lower()) == 'n'.lower():
                generate_promocodes(prefix='TRAIN')
            else:
                logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '*':
            print(f"–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            line_after()

        elif choice == '0':
            exit(1)
            line_after()


def test():
    hamster_client.get_promocodes(prefix='CUBE')


if __name__ == '__main__':
    main()
