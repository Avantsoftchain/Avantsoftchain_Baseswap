import json
import logging
import os
import re
import threading
from concurrent.futures import ThreadPoolExecutor

from dotenv import load_dotenv

from Src.Hamster import HamsterKombatClicker
from Src.utils import WHITE, RESET, YELLOW, CYAN, LIGHT_YELLOW, GREEN, RED, \
    banner, loading, loading_event, line_after, line_before, LIGHT_BLUE, LIGHT_MAGENTA, LIGHT_CYAN

load_dotenv()

logging.basicConfig(format=f"{WHITE}%(asctime)s - %(name)s - %(levelname)s |  %(message)s  | %(filename)s - %(funcName)s() - %(lineno)d{RESET}", level=logging.INFO)
# logging.basicConfig(format=f"{WHITE}%(asctime)s - %(name)s - %(levelname)s |  %(message)s{WHITE}", level=logging.INFO)

# --- CONFIG --- #

send_to_group = True
HAMSTER_TOKEN = os.getenv('HAMSTER_TOKEN')
hamster_client = HamsterKombatClicker(HAMSTER_TOKEN)


# --- CONFIG --- #


def get_status(status):
    return f"{GREEN}‚úÖ{RESET}" if status else f"{RED}‚ùå{RESET}"


def show_menu():
    activities = hamster_client._activity_cooldowns()
    keys_per_day = 4
    for activity in activities:
        if 'taps' in activity:
            taps_status = get_status(activity['taps']['isClaimed'])
            taps_cooldown = activity['taps']['remain']
        if 'tasks' in activity:
            task_status = get_status(activity['tasks']['isClaimed'])
            task_cooldown = activity['tasks']['remain']
        if 'cipher' in activity:
            cipher_status = get_status(activity['cipher']['isClaimed'])
            cipher_cooldown = activity['cipher']['remain']
        if 'combo' in activity:
            combo_status = get_status(activity['combo']['isClaimed'])
            combo_cooldown = activity['combo']['remain']
        if 'minigame' in activity:
            minigame_status = get_status(activity['minigame']['isClaimed'])
            minigame_cooldown = activity['minigame']['remain']
        if 'promo' in activity:
            bike = cube = clon = trin = ""
            bike_keys = cube_keys = clon_keys = trin_keys = 0
            bike_cooldown = cube_cooldown = clon_cooldown = trin_cooldown = "n/a"
            bike_status = cube_status = clon_status = trin_status = "n/a"

            for promo in activity['promo']:
                if promo['name'] == 'Bike Ride 3D':
                    bike = promo['name']
                    bike_keys = promo['keys']
                    bike_cooldown = promo['remain']
                    bike_status = get_status(promo['isClaimed'])

                if promo['name'] == 'Chain Cube 2048':
                    cube = promo['name']
                    cube_keys = promo['keys']
                    cube_cooldown = promo['remain']
                    cube_status = get_status(promo['isClaimed'])

                if promo['name'] == 'My Clone Army':
                    clon = promo['name']
                    clon_keys = promo['keys']
                    clon_cooldown = promo['remain']
                    clon_status = get_status(promo['isClaimed'])

                if promo['name'] == 'Train Miner':
                    trin = promo['name']
                    trin_keys = promo['keys']
                    trin_cooldown = promo['remain']
                    trin_status = get_status(promo['isClaimed'])

    max_width = max(len(bike), len(cube), len(clon), len(trin))
    memu = (
        f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n"
        f"  ‚öôÔ∏è  –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –≥—Ä—É–ø–ø—É: {get_status(send_to_group)} \n\n"
        f"  –ö–∞–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? \n"
        f"  {LIGHT_YELLOW}# |  {RESET}üìù {YELLOW}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è {WHITE} \n"
        f"  {LIGHT_YELLOW}1 |  {RESET}üëÜ {YELLOW}–ö–ª–∏–∫–∏ {WHITE:<15}                           {taps_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {taps_cooldown}\n"
        f"  {LIGHT_YELLOW}2 |  {RESET}üìë {YELLOW}–ó–∞–¥–∞–Ω–∏—è {WHITE:<15}                         {task_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {task_cooldown} \n"
        f"  {LIGHT_YELLOW}3 |  {RESET}üóÉ {YELLOW}–®–∏—Ñ—Ä {WHITE:<15}                            {cipher_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {cipher_cooldown} \n"
        f"  {LIGHT_YELLOW}4 |  {RESET}üí∞ {YELLOW}–ö–æ–º–±–æ {WHITE:<15}                           {combo_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {combo_cooldown} \n"
        f"  {LIGHT_YELLOW}5 |  {RESET}üîë {YELLOW}–ú–∏–Ω–∏–∏–≥—Ä–∞ {WHITE:<15}                        {minigame_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {minigame_cooldown} \n"
        f"  {LIGHT_YELLOW}6 |  {RESET}üö¥ {YELLOW}–ü—Ä–æ–º–æ–∫–æ–¥—ã {LIGHT_YELLOW}{bike:<{max_width}} {WHITE}  {bike_keys}/{keys_per_day}  {bike_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {bike_cooldown} \n"
        f"  {LIGHT_YELLOW}7 |  {RESET}üé≤ {YELLOW}–ü—Ä–æ–º–æ–∫–æ–¥—ã {LIGHT_BLUE}{cube:<{max_width}} {WHITE}  {cube_keys}/{keys_per_day}  {cube_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {cube_cooldown} \n"
        f"  {LIGHT_YELLOW}8 |  {RESET}üïπ {YELLOW}–ü—Ä–æ–º–æ–∫–æ–¥—ã {LIGHT_MAGENTA}{clon:<{max_width}} {WHITE}  {clon_keys}/{keys_per_day}  {clon_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {clon_cooldown} \n"
        f"  {LIGHT_YELLOW}9 |  {RESET}üöÇ {YELLOW}–ü—Ä–æ–º–æ–∫–æ–¥—ã {LIGHT_CYAN}{trin:<{max_width}} {WHITE}  {trin_keys}/{keys_per_day}  {trin_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {trin_cooldown} \n"
        f"  {LIGHT_YELLOW}* |  {RESET}üéâ {YELLOW}–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä {WHITE} \n"
        f"  {LIGHT_YELLOW}$ |  {RESET}üí≤ {YELLOW}–°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç {WHITE} \n"
        f"  {LIGHT_YELLOW}+ |  {RESET}‚ö°Ô∏è {YELLOW}–ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—É `+ID_–ö–∞—Ä—Ç—ã` (–Ω–∞–ø—Ä–º–∏–µ—Ä +dao) {WHITE} \n"
        f"  {LIGHT_YELLOW}0 |  {RESET}üîô {YELLOW}–í—ã–π—Ç–∏{WHITE}"
    )

    print(memu.strip())
    choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n{CYAN}(#/1/2/3/4/5/6/7/8/9/*/$/0):{RESET} ")
    line_before()
    return choice


def generate_promocodes(apply_promo=False, prefix=None):
    if prefix:
        count = input(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (enter –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ")
        if count == '':
            count = 1
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è 1 –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        if int(count) <= 0:
            logging.error(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")
            exit(1)

        main_thread = threading.Thread(target=hamster_client.get_promocodes, args=(count, send_to_group, apply_promo, prefix))
        loading_thread = threading.Thread(target=loading)

        loading_thread.start()
        main_thread.start()

        main_thread.join()

        loading_event.set()
        loading_thread.join()

    else:
        logging.error(f"–ü—Ä–µ—Ñ–∏–∫—Å –∏–≥—Ä—ã –Ω–µ —É–∑–∫–∞–∑–∞–Ω")
        exit(1)


def main():
    banner()
    while True:
        choice = show_menu()

        if choice == '#':
            info = hamster_client.daily_info()
            print(info)
            line_after()

        elif choice == '1':
            hamster_client.complete_taps()
            line_after()

        elif choice == '2':
            hamster_client.complete_daily_tasks()
            line_after()

        elif choice == '3':
            hamster_client.complete_daily_chipher()
            line_after()

        elif choice == '4':
            upgrades_info = hamster_client._collect_upgrades_info()
            if all(card['available'] for card in upgrades_info['cards']):
                hamster_client.complete_daily_combo()
            else:
                choice = input(f"–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã! –•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ? Y(–¥–∞)/N(–Ω–µ—Ç): ")
                if str(choice.lower()) == 'y'.lower():
                    hamster_client.complete_daily_combo(buy_anyway=True)
                elif str(choice.lower()) == 'n'.lower():
                    line_after()
                else:
                    logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '5':
            hamster_client.complete_daily_minigame()
            line_after()

        elif choice == '6':
            choice = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è? Y(–¥–∞)/N(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                generate_promocodes(prefix='BIKE', apply_promo=True)
            elif str(choice.lower()) == 'n'.lower():
                generate_promocodes(prefix='BIKE')
            else:
                logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '7':
            choice = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è? Y(–¥–∞)/N(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                generate_promocodes(prefix='CUBE', apply_promo=True)
            elif str(choice.lower()) == 'n'.lower():
                generate_promocodes(prefix='CUBE')
            else:
                logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '8':
            choice = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è? Y(–¥–∞)/N(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                generate_promocodes(prefix='CLONE', apply_promo=True)
            elif str(choice.lower()) == 'n'.lower():
                generate_promocodes(prefix='CLONE')
            else:
                logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '9':
            choice = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è? Y(–¥–∞)/N(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                generate_promocodes(prefix='TRAIN', apply_promo=True)
            elif str(choice.lower()) == 'n'.lower():
                generate_promocodes(prefix='TRAIN')
            else:
                logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')
            line_after()

        elif choice == '*':
            with open('Src/playground_games_data.json', 'r', encoding='utf-8') as f:
                apps = json.loads(f.read())['apps']

            count = input(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä (enter –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ")
            if count == '':
                count = 1
                print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è 1 –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

            if int(count) <= 0:
                logging.error(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")
                exit(1)

            apply = input(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è? Y(–¥–∞)/N(–Ω–µ—Ç): ")
            if str(apply.lower()) == 'y'.lower():
                apply = True
            elif str(apply.lower()) == 'n'.lower():
                apply = False
            else:
                logging.error(f'–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç!')

            def generate_for_all_games(promo):
                prefix = promo['prefix']
                hamster_client.get_promocodes(count=count, prefix=prefix, send_to_group=send_to_group, apply_promo=apply)

            with ThreadPoolExecutor() as executor:
                executor.map(generate_for_all_games, apps)

            line_after()

        elif choice == '$':
            top_10_cards = hamster_client.evaluate_cards()

            print(f"–¢–æ–ø 10 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏: \n")
            for card in top_10_cards:
                print(
                    f"üè∑  {LIGHT_YELLOW}{card['name']} ¬∑ `{card['section']}`{WHITE} ID({card['id']})\n"
                    f"‚åöÔ∏è  –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ —á–∞—Å–∞—Ö):{LIGHT_MAGENTA} {card['payback_period']:.1f}{WHITE} \n"
                    f"üìä  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏:{LIGHT_CYAN} {card['profitability_ratio']:.3f}{WHITE}"
                )
                print("-" * 30)
            line_after()

        elif choice.startswith('+'):
            match = re.search(pattern=r'\+(.*?)$', string=choice)
            if match:
                upgrade_id = match.group(1)
                hamster_client._buy_upgrade(upgradeId=upgrade_id)

        elif choice == '0':
            exit(1)


def test():
    hamster_client.evaluate_cards()
    pass


if __name__ == '__main__':
    main()
