from Src.Colors import *
from Src.db_SQlite import ConfigDB
from Src.Login import hamster_client
from Src.utils import get_status, get_games_data, remain_time, localized_text

config = ConfigDB()
lang = config.lang


def main_menu():
    activities = hamster_client()._activity_cooldowns()
    taps_status = task_status = cipher_status = combo_status = 'n/a'
    taps_cooldown = task_cooldown = cipher_cooldown = combo_cooldown = 'n/a'

    if activities:
        for activity in activities:
            if 'taps' in activity:
                taps_status = get_status(activity['taps']['isClaimed'])
                taps_cooldown = activity['taps']['remain']
            if 'tasks' in activity:
                task_status = get_status(activity['tasks']['isClaimed'])
                task_cooldown = activity['tasks']['remain']
            if 'cipher' in activity:
                cipher_status = get_status(activity['cipher']['isClaimed'])
                cipher_cooldown = activity['cipher']['remain']
            if 'combo' in activity:
                combo_status = get_status(activity['combo']['isClaimed'])
                combo_cooldown = activity['combo']['remain']

    if config.hamster_token:
        menu = (
            f"üìö  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n"
            f"  –ö–∞–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? \n"
            f"  {LIGHT_YELLOW}# |  {RESET}üìù {YELLOW}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è {WHITE} \n"
            f"  {LIGHT_YELLOW}1 |  {RESET}üëÜ {YELLOW}–ö–ª–∏–∫–∏ {WHITE}       {taps_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {taps_cooldown} \n"
            f"  {LIGHT_YELLOW}2 |  {RESET}üìë {YELLOW}–ó–∞–¥–∞–Ω–∏—è {WHITE}     {task_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {task_cooldown} \n"
            f"  {LIGHT_YELLOW}3 |  {RESET}üîç {YELLOW}–®–∏—Ñ—Ä {WHITE}        {cipher_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {cipher_cooldown} \n"
            f"  {LIGHT_YELLOW}4 |  {RESET}üí∞ {YELLOW}–ö–æ–º–±–æ {WHITE}       {combo_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {combo_cooldown} \n"
            f"  {LIGHT_YELLOW}5 |  {RESET}üîë {YELLOW}–ú–∏–Ω–∏–∏–≥—Ä—ã {WHITE} \n"
            f"  {LIGHT_YELLOW}6 |  {RESET}üéÅ {YELLOW}–ü—Ä–æ–º–æ–∫–æ–¥—ã {WHITE} \n"
            f"  {LIGHT_YELLOW}a |  {RESET}üîê {YELLOW}–ê–∫–∫–∞—É–Ω—Ç—ã {WHITE} \n"
            f"  {LIGHT_YELLOW}$ |  {RESET}üí≤ {YELLOW}–°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç {WHITE} \n"
            f"  {LIGHT_YELLOW}+ |  {RESET}‚≠êÔ∏è {YELLOW}–ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—É `+ID_–ö–∞—Ä—Ç—ã` (–Ω–∞–ø—Ä–º–∏–µ—Ä +dao) {WHITE} \n"
            f"  {LIGHT_YELLOW}s |  {RESET}üõ† {YELLOW}–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {WHITE} \n"
            f"  {LIGHT_YELLOW}m |  {RESET}üìù {YELLOW}–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é {WHITE} \n"
            f"  {LIGHT_YELLOW}0 |  {RESET}üîö {YELLOW}–í—ã–π—Ç–∏{WHITE}"
        )

    else:
        menu = localized_text('main_menu_not_logged', lang, light_yellow=LIGHT_YELLOW, reset=RESET, yellow=YELLOW, white=WHITE)
        # menu = (
        #     f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n"
        #     f"  –ö–∞–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? \n"
        #     f"  {LIGHT_YELLOW}6 |  {RESET}üéÅ {YELLOW}–ü—Ä–æ–º–æ–∫–æ–¥—ã {WHITE}    \n"
        #     f"  {LIGHT_YELLOW}m |  {RESET}üìù {YELLOW}–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é {WHITE} \n"
        #     f"  {LIGHT_YELLOW}0 |  {RESET}üîö {YELLOW}–í—ã–π—Ç–∏{WHITE}"
        # )
    print(f"{menu.strip()} \n")


def playground_menu():
    promos = []
    if config.hamster_token:
        promos = hamster_client()._get_promos()

    keys_per_day = 4
    games_data = get_games_data()['apps']
    games_info = {game['title']: {"emoji": game['emoji'], "color": LIGHT_YELLOW} for game in games_data}
    max_width = max(len(game) for game in games_info)

    for promo in promos:
        game_name = promo['name']
        if game_name in games_info:
            games_info[game_name].update({
                "keys": promo['keys'],
                "cooldown": promo['remain'],
                "status": get_status(promo['isClaimed'])
            })

    menu = "üéÆ  –ò–≥—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ \n  –î–ª—è –∫–∞–∫–æ–π –∏–≥—Ä—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã? \n"
    for i, (game_name, game_data) in enumerate(games_info.items(), start=1):
        keys = game_data.get("keys", 0)
        cooldown = game_data.get("cooldown", "n/a")
        status = game_data.get("status", f"{RED}‚ùå{WHITE}")
        emoji = game_data["emoji"]
        color = game_data["color"]

        menu += (f"  {LIGHT_YELLOW}{i} |  {RESET}{emoji} {YELLOW} {color}{game_name:<{max_width}} {WHITE}  "
                 f"{keys}/{keys_per_day}  {status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {cooldown} \n")

    menu += (
        f"  {LIGHT_YELLOW}* |  {RESET}üéâ {YELLOW} –î–ª—è –≤—Å–µ—Ö –∏–≥—Ä {WHITE} \n"
        f"  {LIGHT_YELLOW}< |  {RESET}üîô {YELLOW} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {WHITE} \n"
        f"  {LIGHT_YELLOW}0 |  {RESET}üîö {YELLOW} –í—ã–π—Ç–∏ {WHITE} \n"
    )
    print(menu.strip())


def minigames_menu():
    minigames = []
    if config.hamster_token:
        minigames = hamster_client()._get_minigames()

    games_data = get_games_data()['minigames']
    games_info = {game['title']: {"emoji": game['emoji'], "color": LIGHT_YELLOW} for game in games_data}
    max_width = max(len(game) for game in games_info)

    for minigame in minigames:
        game_name = minigame['id']
        if game_name in games_info:
            games_info[game_name].update({
                "cooldown": minigame['remainSeconds'],
                "status": get_status(minigame['isClaimed'])
            })

    menu = "üéÆ  –ú–∏–Ω–∏–∏–≥—Ä—ã \n  –ö–∞–∫—É—é –º–∏–Ω–∏–∏–≥—Ä—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏? \n"
    for i, (game_name, game_data) in enumerate(games_info.items(), start=1):
        cooldown = remain_time(game_data.get("cooldown", "n/a"))
        status = game_data.get("status", "n/a")
        emoji = game_data["emoji"]
        color = game_data["color"]

        menu += f"  {LIGHT_YELLOW}{i} |  {RESET}{emoji} {YELLOW} {color}{game_name:<{max_width}} {WHITE}  {status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {cooldown} \n"

    menu += (
        f"  {LIGHT_YELLOW}< |  {RESET}üîô {YELLOW} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {WHITE} \n"
        f"  {LIGHT_YELLOW}0 |  {RESET}üîö {YELLOW} –í—ã–π—Ç–∏ {WHITE} \n"
    )
    print(menu.strip())


def settings_menu():
    send_to_group = get_status(config.send_to_group)
    apply_promo = get_status(config.apply_promo)
    save_to_file = get_status(config.save_to_file)
    spinner = config.spinner

    menu = (
        f"üõ†  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ \n"
        f"  {LIGHT_YELLOW}1 | {RESET}{YELLOW} –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≥—Ä—É–ø–ø—É:  {send_to_group} (–≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å) {WHITE} \n"
        f"  {LIGHT_YELLOW}2 | {RESET}{YELLOW} –ü—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã:  {apply_promo} (–≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å) {WHITE} \n"
        f"  {LIGHT_YELLOW}3 | {RESET}{YELLOW} –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ñ–∞–π–ª:     {save_to_file} (–≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å) {WHITE} \n"
        f"  {LIGHT_YELLOW}  | {RESET}{YELLOW} –°–ø–∏–Ω–Ω–µ—Ä:              {spinner}{WHITE} (spinner_<name> ¬∑ <name>/default/list) \n"
    )
    print(menu.strip())
