import asyncio
import logging
import os
import re

from Src.Colors import *
from Src.Hamster import HamsterKombatClicker
from Src.Login import hamster_client
from Src.Settings import save_settings, load_settings
from Src.utils import get_status, line_before, line_after, get_games_data

settings = load_settings()


def choose_account():
    accounts = []
    current_account = hamster_client().get_account_info()

    env_vars = {key: os.getenv(key) for key in os.environ if key in os.environ}
    for key, value in env_vars.items():
        if key.startswith('HAMSTER'):
            accounts.append(value)

    if len(accounts) > 1:
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ {len(accounts)}: ")
        account_dict = {}
        for e, token in enumerate(accounts):
            hamster = HamsterKombatClicker(token)
            account_info = hamster.get_account_info()
            username = account_info.get('username', 'n/a')
            first_name = account_info.get('firstName', 'n/a')
            last_name = account_info.get('lastName', 'n/a')
            if username == current_account.get('username', 'n/a'):
                print(f"[{e + 1}] ¬∑ {LIGHT_BLUE}{first_name} {last_name} ({username}){WHITE} (–≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω)")
            else:
                print(f"[{e + 1}] ¬∑ {first_name} {last_name} ({username})")
            account_dict[str(e + 1)] = token

        account_choice = input(f"\n–ö–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
        line_after()
        if account_choice in account_dict:
            return f"HAMSTER_TOKEN_{account_choice}"
    else:
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ 1 –∞–∫–∫–∞—É–Ω—Ç –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `HAMSTER_TOKEN_1`")
        return "HAMSTER_TOKEN_1"


def generate_promocodes(prefix='', apply_promo=False):
    count = input(f"\n–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?\nEnter(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ")
    if count == '':
        count = 1
        print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    if int(count) <= 0:
        logging.error(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")

    try:
        send_to_group = settings['send_to_group']
        save_to_file = settings['save_to_file']
        asyncio.run(hamster_client().get_promocodes(int(count), send_to_group, apply_promo, prefix, save_to_file))

    except Exception as e:
        logging.error(e)

    finally:
        pass


def generate_for_game(prefix):
    choice_text = "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è?\nY(–¥–∞) / Enter(–ù–µ—Ç): "
    if settings.get('hamster_token'):
        if settings.get('apply_promo'):
            generate_promocodes(prefix=prefix, apply_promo=settings['apply_promo'])
        else:
            choice = input(choice_text).lower()
            if choice == 'y':
                generate_promocodes(prefix=prefix, apply_promo=True)
            elif choice == '':
                generate_promocodes(prefix=prefix)
            else:
                print("–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç")
    else:
        generate_promocodes(prefix=prefix)
    line_before()


async def genetare_for_all_games():
    apps = get_games_data()['apps']

    if settings['hamster_token']:
        choice = input(f"\n–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è?\nY(–¥–∞) / Enter(–ù–µ—Ç): ")
        apply_promo = str(choice.lower()) == 'y'.lower()

    count = input(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä Enter(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ")
    if count == '':
        count = 1
        print("\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    if int(count) <= 0:
        logging.error(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")
        exit(1)

    tasks = [hamster_client().get_promocodes(int(count), settings['send_to_group'], apply_promo, app["prefix"], settings['save_to_file']) for app in apps]
    await asyncio.gather(*tasks)


def main_menu():
    activities = hamster_client()._activity_cooldowns()
    taps_status = task_status = cipher_status = combo_status = minigame_status = 'n/a'
    taps_cooldown = task_cooldown = cipher_cooldown = combo_cooldown = minigame_cooldown = 'n/a'

    if activities:
        for activity in activities:
            if 'taps' in activity:
                taps_status = get_status(activity['taps']['isClaimed'])
                taps_cooldown = activity['taps']['remain']
            if 'tasks' in activity:
                task_status = get_status(activity['tasks']['isClaimed'])
                task_cooldown = activity['tasks']['remain']
            if 'cipher' in activity:
                cipher_status = get_status(activity['cipher']['isClaimed'])
                cipher_cooldown = activity['cipher']['remain']
            if 'combo' in activity:
                combo_status = get_status(activity['combo']['isClaimed'])
                combo_cooldown = activity['combo']['remain']
            if 'minigame' in activity:
                minigame_status = get_status(activity['minigame']['isClaimed'])
                minigame_cooldown = activity['minigame']['remain']
    print()
    if settings['hamster_token']:
        memu = (
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ \n"
            f"  ‚öôÔ∏è  –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≥—Ä—É–ø–ø—É:  {get_status(settings['send_to_group'])} (toggle_group ¬∑ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å)\n"
            f"  ‚öôÔ∏è  –ü—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã:  {get_status(settings['apply_promo'])} (toggle_apply ¬∑ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å)\n"
            f"  ‚öôÔ∏è  –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ñ–∞–π–ª:     {get_status(settings['save_to_file'])} (toggle_file  ¬∑ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å)\n\n"
            f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n"
            f"  –ö–∞–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? \n"
            f"  {LIGHT_YELLOW}# |  {RESET}üìù {YELLOW}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è {WHITE} \n"
            f"  {LIGHT_YELLOW}1 |  {RESET}üëÜ {YELLOW}–ö–ª–∏–∫–∏ {WHITE}       {taps_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {taps_cooldown}\n"
            f"  {LIGHT_YELLOW}2 |  {RESET}üìë {YELLOW}–ó–∞–¥–∞–Ω–∏—è {WHITE}     {task_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {task_cooldown} \n"
            f"  {LIGHT_YELLOW}3 |  {RESET}üîç {YELLOW}–®–∏—Ñ—Ä {WHITE}        {cipher_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {cipher_cooldown} \n"
            f"  {LIGHT_YELLOW}4 |  {RESET}üîë {YELLOW}–ú–∏–Ω–∏–∏–≥—Ä–∞ {WHITE}    {minigame_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {minigame_cooldown} \n"
            f"  {LIGHT_YELLOW}5 |  {RESET}üí∞ {YELLOW}–ö–æ–º–±–æ {WHITE}       {combo_status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {combo_cooldown} \n"
            f"  {LIGHT_YELLOW}6 |  {RESET}üéÅ {YELLOW}–ü—Ä–æ–º–æ–∫–æ–¥—ã {WHITE}    \n"
            f"  {LIGHT_YELLOW}a |  {RESET}üîê {YELLOW}–ê–∫–∫–∞—É–Ω—Ç—ã {WHITE}     \n"
            f"  {LIGHT_YELLOW}$ |  {RESET}üí≤ {YELLOW}–°–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç {WHITE} \n"
            f"  {LIGHT_YELLOW}+ |  {RESET}‚≠êÔ∏è {YELLOW}–ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç—É `+ID_–ö–∞—Ä—Ç—ã` (–Ω–∞–ø—Ä–º–∏–µ—Ä +dao) {WHITE} \n"
            f"  {LIGHT_YELLOW}m |  {RESET}üìù {YELLOW}–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é {WHITE} \n"
            f"  {LIGHT_YELLOW}0 |  {RESET}üîö {YELLOW}–í—ã–π—Ç–∏{WHITE}"
        )

    else:
        memu = (
            f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é \n"
            f"  –ö–∞–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? \n"
            f"  {LIGHT_YELLOW}6 |  {RESET}üéÅ {YELLOW}–ü—Ä–æ–º–æ–∫–æ–¥—ã {WHITE}    \n"
            f"  {LIGHT_YELLOW}m |  {RESET}üìù {YELLOW}–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é {WHITE} \n"
            f"  {LIGHT_YELLOW}0 |  {RESET}üîö {YELLOW}–í—ã–π—Ç–∏{WHITE}"
        )
    print(memu.strip())


def playground_menu():
    promos = []
    if settings['hamster_token']:
        promos = hamster_client()._get_promos()[0]['promo']

    games_data = get_games_data()['apps']
    keys_per_day = 4
    games_info = {game['title']: {"emoji": game['emoji'], "color": LIGHT_YELLOW} for game in games_data}

    for promo in promos:
        game_name = promo['name']
        if game_name in games_info:
            games_info[game_name].update({
                "keys": promo['keys'],
                "cooldown": promo['remain'],
                "status": get_status(promo['isClaimed'])
            })

    max_width = max(len(game) for game in games_info)
    print()
    menu = "üéÆ  –ò–≥—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ \n  –î–ª—è –∫–∞–∫–æ–π –∏–≥—Ä—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã? \n"

    for i, (game_name, game_data) in enumerate(games_info.items(), start=1):
        keys = game_data.get("keys", 'n/a')
        cooldown = game_data.get("cooldown", "n/a")
        status = game_data.get("status", "n/a")
        emoji = game_data["emoji"]
        color = game_data["color"]

        menu += (f"  {LIGHT_YELLOW}{i} |  {RESET}{emoji} {YELLOW} {color}{game_name:<{max_width}} {WHITE}  "
                 f"{keys}/{keys_per_day}  {status} ¬∑ –û—Å—Ç–∞–ª–æ—Å—å: {cooldown} \n")

    menu += (
        f"  {LIGHT_YELLOW}* |  {RESET}üéâ {YELLOW} –î–ª—è –≤—Å–µ—Ö –∏–≥—Ä {WHITE} \n"
        f"  {LIGHT_YELLOW}< |  {RESET}üîô {YELLOW} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {WHITE} \n"
        f"  {LIGHT_YELLOW}0 |  {RESET}üîö {YELLOW} –í—ã–π—Ç–∏ {WHITE} \n"
    )

    print(menu.strip())


def handle_main_menu_choice(choice):
    if choice == '#':
        line_after()
        print(hamster_client().daily_info())

    elif choice == '1':
        line_after()
        hamster_client().complete_taps()

    elif choice == '2':
        line_after()
        hamster_client().complete_daily_tasks()

    elif choice == '3':
        line_after()
        hamster_client().complete_daily_chipher()

    elif choice == '4':
        line_after()
        hamster_client().complete_daily_minigame()

    elif choice == '5':
        line_after()
        upgrades_info = hamster_client()._collect_upgrades_info()
        if all(card['available'] for card in upgrades_info['cards']):
            hamster_client().complete_daily_combo()
        else:
            choice = input(f"–°–µ–≥–æ–¥–Ω—è –Ω–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã!\n–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ? Y(–¥–∞) / Enter(–Ω–µ—Ç): ")
            if str(choice.lower()) == 'y'.lower():
                hamster_client().complete_daily_combo(buy_anyway=True)

    elif choice == '6':
        handle_playground_menu_choice()

    elif choice == 'a':
        line_after()
        settings['account'] = choose_account()
        save_settings(settings)
        hamster_client().login()

    elif choice == '$':
        line_after()
        top_10_cards = hamster_client().evaluate_cards()
        print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞ –∫–∞–∂–¥—É—é –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—É—é –º–æ–Ω–µ—Ç—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ\n"
              f"–ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª—å –≤ —Ä–∞–∑–º–µ—Ä–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ % –æ—Ç —Å—É–º–º—ã, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π –Ω–∞ –ø–æ–∫—É–ø–∫—É —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.\n")

        print(f"–¢–æ–ø 20 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç (–ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏): \n")
        for card in top_10_cards:
            price = f"{LIGHT_YELLOW}{card['price']:,}{WHITE} ¬∑ {LIGHT_MAGENTA}+{card['profitPerHour']:,}{WHITE} –≤ —á–∞—Å ¬∑ {MAGENTA}+{card['profitPerHourDelta']:,}{WHITE} –≤ —á–∞—Å (–ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏)".replace(',', ' ')
            print(
                f"üè∑  {GREEN}{card['name']}{WHITE} ({card['id']}) ¬∑ {card['section']}\n"
                f"üí∞  {YELLOW}–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}\n"
                f"üïû  {YELLOW}–í—Ä–µ–º—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {LIGHT_GREEN}{card['payback_period']}{WHITE} (~{card['payback_days']} –¥–Ω–µ–π) \n"
                f"üìä  {YELLOW}–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏: {LIGHT_CYAN}{card['profitability_ratio']:.4f}%{WHITE}"
            )
            print("-" * 30)

    elif choice.startswith('+'):
        line_after()
        match = re.search(pattern=r'\+(.*?)$', string=choice)
        if match:
            upgrade_id = match.group(1)
            hamster_client()._buy_upgrade(upgradeId=upgrade_id)

    elif choice == 'm':
        line_after()
        main_menu()

    elif choice == '0':
        line_after()
        print("–í—ã—Ö–æ–¥")
        line_before()
        exit(1)

    elif choice == 'toggle_group':
        line_after()
        settings['send_to_group'] = not settings['send_to_group']
        save_settings(settings)
        status = '–≤–∫–ª—é—á–µ–Ω–∞' if settings['send_to_group'] else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'
        print(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –≥—Ä—É–ø–ø—É {status}')
        line_before()
        main_menu()

    elif choice == 'toggle_file':
        line_after()
        settings['save_to_file'] = not settings['save_to_file']
        save_settings(settings)
        status = '–≤–∫–ª—é—á–µ–Ω–æ' if settings['save_to_file'] else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'
        print(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª {status}')
        line_before()
        main_menu()

    elif choice == 'toggle_apply':
        line_after()
        settings['apply_promo'] = not settings['apply_promo']
        status = '–≤–∫–ª—é—á–µ–Ω–æ' if settings['apply_promo'] else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'
        save_settings(settings)
        print(f'–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {status}')
        line_before()
        main_menu()

    else:
        line_after()
        print("–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç")


def handle_playground_menu_choice():
    games_data = get_games_data()['apps']
    games_prefix = {str(index + 1): game['prefix'] for index, game in enumerate(games_data)}

    while True:
        playground_menu()
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\n{CYAN}(1/2/3/4/5/6/7/8/9/*/</0): {RESET}")
        line_after()

        if choice in games_prefix:
            generate_for_game(games_prefix[choice])
        elif choice == '*':
            asyncio.run(genetare_for_all_games())
            line_before()
        elif choice == '<':
            print('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            return
        elif choice == '0':
            print("–í—ã—Ö–æ–¥")
            line_before()
            exit(1)
        else:
            print("–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç")
