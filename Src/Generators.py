import asyncio
import logging

from Src.Login import hamster_client
from Src.Settings import load_settings
from Src.utils import line_before, get_games_data

settings = load_settings()


def generate_promocodes(prefix='', apply_promo=False):
    count = input(f"\n–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?\nEnter(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ")
    if count == '':
        count = 1
        print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    if int(count) <= 0:
        logging.error(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")

    try:
        send_to_group = settings['send_to_group']
        save_to_file = settings['save_to_file']
        asyncio.run(hamster_client().get_promocodes(int(count), send_to_group, apply_promo, prefix, save_to_file))

    except Exception:
        print(f"üö´  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ª–æ–ª–∂–∞—Ç—å—Å—è, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        pass


def generate_for_game(prefix):
    choice_text = "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è?\nY(–¥–∞) / Enter(–ù–µ—Ç): "
    if settings.get('hamster_token'):
        if settings.get('apply_promo'):
            generate_promocodes(prefix=prefix, apply_promo=settings['apply_promo'])
        else:
            choice = input(choice_text).lower()
            if choice == 'y':
                generate_promocodes(prefix=prefix, apply_promo=True)
            elif choice == '':
                generate_promocodes(prefix=prefix)
            else:
                print("–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç")
    else:
        generate_promocodes(prefix=prefix)
    line_before()


async def genetare_for_all_games():
    apps = get_games_data()['apps']

    if settings['hamster_token']:
        choice = input(f"\n–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è?\nY(–¥–∞) / Enter(–ù–µ—Ç): ")
        apply_promo = str(choice.lower()) == 'y'.lower()

    count = input(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä Enter(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ")
    if count == '':
        count = 1
        print("\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    if int(count) <= 0:
        logging.error(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0")
        exit(1)

    tasks = [hamster_client().get_promocodes(int(count), settings['send_to_group'], apply_promo, app["prefix"], settings['save_to_file']) for app in apps]
    await asyncio.gather(*tasks)
